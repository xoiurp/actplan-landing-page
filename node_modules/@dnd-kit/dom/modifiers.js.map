{"version":3,"sources":["src/modifiers/RestrictToWindow.ts","src/modifiers/RestrictToElement.ts"],"names":["Modifier","effect","restrictShapeToBoundingRectangle","Rectangle"],"mappings":"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","file":"modifiers.js","sourcesContent":["import {effect, untracked} from '@dnd-kit/state';\nimport {Modifier, type DragOperation} from '@dnd-kit/abstract';\nimport {restrictShapeToBoundingRectangle} from '@dnd-kit/abstract/modifiers';\nimport {Rectangle, type BoundingRectangle} from '@dnd-kit/geometry';\nimport type {DragDropManager} from '@dnd-kit/dom';\nimport {getViewportBoundingRectangle} from '@dnd-kit/dom/utilities';\n\nexport class RestrictToWindow extends Modifier<DragDropManager> {\n  constructor(manager: DragDropManager) {\n    super(manager);\n\n    const {dragOperation} = manager;\n\n    const getWindowBoundingRectangle = () =>\n      untracked(() => {\n        const {source} = dragOperation;\n        this.windowBoundingRectangle = getViewportBoundingRectangle(\n          source?.element ?? document.documentElement\n        );\n      });\n\n    this.destroy = effect(() => {\n      if (dragOperation.status.idle) {\n        return;\n      }\n\n      getWindowBoundingRectangle();\n\n      window.addEventListener('resize', getWindowBoundingRectangle);\n\n      return () => {\n        window.removeEventListener('resize', getWindowBoundingRectangle);\n      };\n    });\n  }\n\n  windowBoundingRectangle: BoundingRectangle | undefined;\n\n  apply({shape, transform}: DragOperation) {\n    if (!this.windowBoundingRectangle || !shape) {\n      return transform;\n    }\n\n    const {initial, current} = shape;\n    const {height, width} = current.boundingRectangle;\n    const left = initial.center.x - width / 2;\n    const top = initial.center.y - height / 2;\n\n    const restrictedTransform = restrictShapeToBoundingRectangle(\n      new Rectangle(left, top, width, height),\n      transform,\n      this.windowBoundingRectangle\n    );\n\n    return restrictedTransform;\n  }\n}\n","import {Modifier, configurator} from '@dnd-kit/abstract';\nimport {restrictShapeToBoundingRectangle} from '@dnd-kit/abstract/modifiers';\nimport {BoundingRectangle, Rectangle} from '@dnd-kit/geometry';\nimport {effect, signal} from '@dnd-kit/state';\nimport type {DragDropManager} from '@dnd-kit/dom';\nimport {getBoundingRectangle} from '@dnd-kit/dom/utilities';\n\ninterface Options {\n  element?:\n    | Element\n    | null\n    | ((operation: DragDropManager['dragOperation']) => Element | null);\n}\n\nexport class RestrictToElement extends Modifier<DragDropManager, Options> {\n  private boundingRectangle = signal<BoundingRectangle | null>(null);\n\n  constructor(manager: DragDropManager, options?: Options) {\n    super(manager, options);\n\n    this.destroy = effect(() => {\n      if (!this.options) {\n        return;\n      }\n\n      const {dragOperation} = manager;\n      const {status} = dragOperation;\n\n      if (status.initialized) {\n        const {element} = this.options;\n        const target =\n          typeof element === 'function' ? element(dragOperation) : element;\n\n        if (!target) {\n          return;\n        }\n\n        let timeout: NodeJS.Timeout | undefined;\n        const updateBoundingRectangle = () => {\n          this.boundingRectangle.value = getBoundingRectangle(target);\n        };\n        const handleScroll = () => {\n          if (timeout) {\n            return;\n          }\n\n          timeout = setTimeout(() => {\n            updateBoundingRectangle();\n            timeout = undefined;\n          }, 25);\n        };\n        const resizeObserver = new ResizeObserver(updateBoundingRectangle);\n\n        resizeObserver.observe(target);\n\n        document.addEventListener('scroll', handleScroll, {\n          passive: true,\n          capture: true,\n        });\n\n        return () => {\n          document.removeEventListener('scroll', handleScroll, {\n            capture: true,\n          });\n          resizeObserver.disconnect();\n          this.boundingRectangle.value = null;\n        };\n      }\n    });\n  }\n\n  apply(operation: DragDropManager['dragOperation']) {\n    const {shape, transform} = operation;\n\n    if (!shape) {\n      return transform;\n    }\n\n    const boundingRectangle = this.boundingRectangle.value;\n\n    if (!boundingRectangle) {\n      return transform;\n    }\n\n    const {initial, current} = shape;\n    const {height, width} = current.boundingRectangle;\n    const left = initial.center.x - width / 2;\n    const top = initial.center.y - height / 2;\n\n    const restrictedTransform = restrictShapeToBoundingRectangle(\n      new Rectangle(left, top, width, height),\n      transform,\n      boundingRectangle\n    );\n\n    return restrictedTransform;\n  }\n\n  static configure = configurator(RestrictToElement);\n}\n"]}