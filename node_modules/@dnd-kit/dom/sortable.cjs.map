{"version":3,"sources":["src/sortable/utilities.ts","src/sortable/SortableKeyboardPlugin.ts","../helpers/dist/index.js","src/sortable/OptimisticSortingPlugin.ts","src/sortable/sortable.ts"],"names":["Plugin","effect","isKeyboardEvent","Scroller","manager","batch","id","DOMRectangle","getVisibleBoundingRectangle","closestCorners","source","target","scrollIntoViewIfNeeded","__defProp","__defProps","__getOwnPropDescs","__getOwnPropSymbols","__hasOwnProp","__propIsEnum","__defNormalProp","__spreadValues","__spreadProps","state","reactive","Sortable","_a","index","group","untracked","getComputedStyles","computeTranslate","animateTransform","ProxiedElements","defaultCollisionDetection","Draggable","Droppable"],"mappings":"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","file":"sortable.cjs","sourcesContent":["import type {Droppable, Draggable} from '@dnd-kit/dom';\n\nimport {SortableDroppable, SortableDraggable} from './sortable.ts';\n\nexport function isSortable(\n  element: Draggable | Droppable | null\n): element is SortableDroppable<any> | SortableDraggable<any> {\n  return (\n    element instanceof SortableDroppable || element instanceof SortableDraggable\n  );\n}\n","import {batch, CleanupFunction, effect} from '@dnd-kit/state';\nimport {Plugin} from '@dnd-kit/abstract';\nimport {closestCorners} from '@dnd-kit/collision';\nimport {\n  DOMRectangle,\n  getVisibleBoundingRectangle,\n  isKeyboardEvent,\n  scrollIntoViewIfNeeded,\n} from '@dnd-kit/dom/utilities';\nimport type {Coordinates} from '@dnd-kit/geometry';\nimport {Scroller} from '@dnd-kit/dom';\nimport type {DragDropManager, Droppable} from '@dnd-kit/dom';\n\nimport {isSortable} from './utilities.ts';\n\nconst TOLERANCE = 10;\n\nexport class SortableKeyboardPlugin extends Plugin<DragDropManager> {\n  constructor(manager: DragDropManager) {\n    super(manager);\n\n    const cleanupEffect = effect(() => {\n      const {dragOperation} = manager;\n\n      if (!isKeyboardEvent(dragOperation.activatorEvent)) {\n        return;\n      }\n\n      if (!isSortable(dragOperation.source)) {\n        return;\n      }\n\n      if (dragOperation.status.initialized) {\n        const scroller = manager.registry.plugins.get(Scroller);\n\n        if (scroller) {\n          scroller.disable();\n\n          return () => scroller.enable();\n        }\n      }\n    });\n\n    const unsubscribe = manager.monitor.addEventListener(\n      'dragmove',\n      (event, manager: DragDropManager) => {\n        queueMicrotask(() => {\n          if (this.disabled || event.defaultPrevented) {\n            return;\n          }\n\n          const {dragOperation} = manager;\n\n          if (!isKeyboardEvent(dragOperation.activatorEvent)) {\n            return;\n          }\n\n          if (!isSortable(dragOperation.source)) {\n            return;\n          }\n\n          if (!dragOperation.shape) {\n            return;\n          }\n\n          const {actions, collisionObserver, registry} = manager;\n          const {by} = event;\n\n          if (!by) {\n            return;\n          }\n\n          const direction = getDirection(by);\n          const {source, target} = dragOperation;\n          const {center} = dragOperation.shape.current;\n          const potentialTargets: Droppable[] = [];\n          const cleanup: CleanupFunction[] = [];\n\n          batch(() => {\n            for (const droppable of registry.droppables) {\n              const {id} = droppable;\n\n              if (\n                !droppable.accepts(source) ||\n                (id === target?.id && isSortable(droppable)) ||\n                !droppable.element\n              ) {\n                continue;\n              }\n\n              let previousShape = droppable.shape;\n              const shape = new DOMRectangle(droppable.element, {\n                getBoundingClientRect: (element) =>\n                  getVisibleBoundingRectangle(element, undefined, 0.2),\n              });\n\n              if (!shape.height || !shape.width) continue;\n\n              if (\n                (direction == 'down' &&\n                  center.y + TOLERANCE < shape.center.y) ||\n                (direction == 'up' && center.y - TOLERANCE > shape.center.y) ||\n                (direction == 'left' &&\n                  center.x - TOLERANCE > shape.center.x) ||\n                (direction == 'right' && center.x + TOLERANCE < shape.center.x)\n              ) {\n                potentialTargets.push(droppable);\n                droppable.shape = shape;\n                cleanup.push(() => (droppable.shape = previousShape));\n              }\n            }\n          });\n\n          event.preventDefault();\n          collisionObserver.disable();\n\n          const collisions = collisionObserver.computeCollisions(\n            potentialTargets,\n            closestCorners\n          );\n          batch(() => cleanup.forEach((clean) => clean()));\n\n          const [firstCollision] = collisions;\n\n          if (!firstCollision) {\n            return;\n          }\n\n          const {id} = firstCollision;\n          const {index, group} = source.sortable;\n\n          actions.setDropTarget(id).then((defaultPrevented) => {\n            if (defaultPrevented) return;\n\n            // Wait until optimistic sorting has a chance to update the DOM\n            const {source, target} = dragOperation;\n\n            if (!source || !isSortable(source)) {\n              return;\n            }\n\n            const {\n              index: newIndex,\n              group: newGroup,\n              target: targetElement,\n            } = source.sortable;\n            const updated = index !== newIndex || group !== newGroup;\n            const element = updated ? targetElement : target?.element;\n\n            if (!element) return;\n\n            scrollIntoViewIfNeeded(element);\n            const shape = new DOMRectangle(element);\n\n            if (!shape) {\n              return;\n            }\n\n            actions.move({\n              to: {\n                x: shape.center.x,\n                y: shape.center.y,\n              },\n            });\n\n            if (updated) {\n              actions\n                .setDropTarget(source.id)\n                .then(() => collisionObserver.enable());\n            } else {\n              collisionObserver.enable();\n            }\n          });\n        });\n      }\n    );\n\n    this.destroy = () => {\n      unsubscribe();\n      cleanupEffect();\n    };\n  }\n}\n\nfunction getDirection(delta: Coordinates) {\n  const {x, y} = delta;\n\n  if (x > 0) {\n    return 'right';\n  } else if (x < 0) {\n    return 'left';\n  } else if (y > 0) {\n    return 'down';\n  } else if (y < 0) {\n    return 'up';\n  }\n}\n","var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\n// src/move.ts\nfunction arrayMove(array, from, to) {\n  if (from === to) {\n    return array;\n  }\n  const newArray = array.slice();\n  newArray.splice(to, 0, newArray.splice(from, 1)[0]);\n  return newArray;\n}\nfunction arraySwap(array, from, to) {\n  if (from === to) {\n    return array;\n  }\n  const newArray = array.slice();\n  const item = newArray[from];\n  newArray[from] = newArray[to];\n  newArray[to] = item;\n  return newArray;\n}\nfunction mutate(items, event, mutation) {\n  var _a, _b;\n  const { source, target, canceled } = event.operation;\n  if (!source || !target || canceled) {\n    if (\"preventDefault\" in event) event.preventDefault();\n    return items;\n  }\n  const findIndex = (item, id) => item === id || typeof item === \"object\" && \"id\" in item && item.id === id;\n  if (Array.isArray(items)) {\n    const sourceIndex2 = items.findIndex((item) => findIndex(item, source.id));\n    const targetIndex2 = items.findIndex((item) => findIndex(item, target.id));\n    if (sourceIndex2 === -1 || targetIndex2 === -1) {\n      return items;\n    }\n    if (!canceled && \"index\" in source && typeof source.index === \"number\") {\n      const projectedSourceIndex = source.index;\n      if (projectedSourceIndex !== sourceIndex2) {\n        return mutation(items, sourceIndex2, projectedSourceIndex);\n      }\n    }\n    return mutation(items, sourceIndex2, targetIndex2);\n  }\n  const entries = Object.entries(items);\n  let sourceIndex = -1;\n  let sourceParent;\n  let targetIndex = -1;\n  let targetParent;\n  for (const [id, children] of entries) {\n    if (sourceIndex === -1) {\n      sourceIndex = children.findIndex((item) => findIndex(item, source.id));\n      if (sourceIndex !== -1) {\n        sourceParent = id;\n      }\n    }\n    if (targetIndex === -1) {\n      targetIndex = children.findIndex((item) => findIndex(item, target.id));\n      if (targetIndex !== -1) {\n        targetParent = id;\n      }\n    }\n    if (sourceIndex !== -1 && targetIndex !== -1) {\n      break;\n    }\n  }\n  if (!source.manager) return items;\n  const { dragOperation } = source.manager;\n  const position = (_b = (_a = dragOperation.shape) == null ? void 0 : _a.current.center) != null ? _b : dragOperation.position.current;\n  if (targetParent == null) {\n    if (target.id in items) {\n      const insertionIndex = target.shape && position.y > target.shape.center.y ? items[target.id].length : 0;\n      targetParent = target.id;\n      targetIndex = insertionIndex;\n    }\n  }\n  if (sourceParent == null || targetParent == null || sourceParent === targetParent && sourceIndex === targetIndex) {\n    if (\"preventDefault\" in event) event.preventDefault();\n    return items;\n  }\n  if (sourceParent === targetParent) {\n    return __spreadProps(__spreadValues({}, items), {\n      [sourceParent]: mutation(items[sourceParent], sourceIndex, targetIndex)\n    });\n  }\n  const isBelowTarget = target.shape && Math.round(position.y) > Math.round(target.shape.center.y);\n  const modifier = isBelowTarget ? 1 : 0;\n  const sourceItem = items[sourceParent][sourceIndex];\n  return __spreadProps(__spreadValues({}, items), {\n    [sourceParent]: [\n      ...items[sourceParent].slice(0, sourceIndex),\n      ...items[sourceParent].slice(sourceIndex + 1)\n    ],\n    [targetParent]: [\n      ...items[targetParent].slice(0, targetIndex + modifier),\n      sourceItem,\n      ...items[targetParent].slice(targetIndex + modifier)\n    ]\n  });\n}\nfunction move(items, event) {\n  return mutate(items, event, arrayMove);\n}\nfunction swap(items, event) {\n  return mutate(items, event, arraySwap);\n}\nexport {\n  arrayMove,\n  arraySwap,\n  move,\n  swap\n};\n","import {Plugin, type UniqueIdentifier} from '@dnd-kit/abstract';\nimport type {DragDropManager} from '@dnd-kit/dom';\nimport {move} from '@dnd-kit/helpers';\n\nimport {isSortable} from './utilities.ts';\nimport {Sortable, SortableDroppable} from './sortable.ts';\nimport {batch} from '@dnd-kit/state';\n\nconst defaultGroup = '__default__';\n\nexport class OptimisticSortingPlugin extends Plugin<DragDropManager> {\n  constructor(manager: DragDropManager) {\n    super(manager);\n\n    const getSortableInstances = () => {\n      const sortableInstances = new Map<\n        UniqueIdentifier | undefined,\n        Set<Sortable>\n      >();\n\n      for (const droppable of manager.registry.droppables) {\n        if (droppable instanceof SortableDroppable) {\n          const {sortable} = droppable;\n          const {group} = sortable;\n\n          let instances = sortableInstances.get(group);\n\n          if (!instances) {\n            instances = new Set();\n            sortableInstances.set(group, instances);\n          }\n\n          instances.add(sortable);\n        }\n      }\n\n      for (const [group, instances] of sortableInstances) {\n        sortableInstances.set(group, new Set(sort(instances)));\n      }\n\n      return sortableInstances;\n    };\n\n    const unsubscribe = [\n      manager.monitor.addEventListener('dragover', (event, manager) => {\n        queueMicrotask(() => {\n          if (this.disabled || event.defaultPrevented) {\n            return;\n          }\n\n          const {dragOperation} = manager;\n          const {source, target} = dragOperation;\n\n          if (!isSortable(source) || !isSortable(target)) {\n            return;\n          }\n\n          if (source.sortable === target.sortable) {\n            return;\n          }\n\n          const instances = getSortableInstances();\n          const sameGroup = source.sortable.group === target.sortable.group;\n          const sourceInstances = instances.get(source.sortable.group);\n          const targetInstances = sameGroup\n            ? sourceInstances\n            : instances.get(target.sortable.group);\n\n          if (!sourceInstances || !targetInstances) return;\n\n          // Wait for the renderer to handle the event before attempting to optimistically update\n          manager.renderer.rendering.then(() => {\n            const newInstances = getSortableInstances();\n\n            for (const [group, sortableInstances] of instances.entries()) {\n              const entries = Array.from(sortableInstances).entries();\n\n              for (const [index, sortable] of entries) {\n                if (\n                  sortable.index !== index ||\n                  sortable.group !== group ||\n                  !newInstances.get(group)?.has(sortable)\n                ) {\n                  // At least one index or group was changed so we should abort optimistic updates\n                  return;\n                }\n              }\n            }\n\n            const sourceElement = source.sortable.element;\n            const targetElement = target.sortable.element;\n\n            if (!targetElement || !sourceElement) {\n              return;\n            }\n\n            if (!sameGroup && target.id === source.sortable.group) {\n              return;\n            }\n\n            const orderedSourceSortables = sort(sourceInstances);\n            const orderedTargetSortables = sameGroup\n              ? orderedSourceSortables\n              : sort(targetInstances);\n            const sourceGroup = source.sortable.group ?? defaultGroup;\n            const targetGroup = target.sortable.group ?? defaultGroup;\n            const state = {\n              [sourceGroup]: orderedSourceSortables,\n              [targetGroup]: orderedTargetSortables,\n            };\n            const newState = move(state, event);\n\n            if (state === newState) return;\n\n            const sourceIndex = newState[targetGroup].indexOf(source.sortable);\n            const targetIndex = newState[targetGroup].indexOf(target.sortable);\n\n            reorder(sourceElement, sourceIndex, targetElement, targetIndex);\n\n            manager.collisionObserver.disable();\n\n            batch(() => {\n              for (const [index, sortable] of newState[sourceGroup].entries()) {\n                sortable.index = index;\n              }\n\n              if (!sameGroup) {\n                for (const [index, sortable] of newState[\n                  targetGroup\n                ].entries()) {\n                  sortable.group = target.sortable.group;\n                  sortable.index = index;\n                }\n              }\n            });\n\n            manager.actions\n              .setDropTarget(source.id)\n              .then(() => manager.collisionObserver.enable());\n          });\n        });\n      }),\n      manager.monitor.addEventListener('dragend', (event, manager) => {\n        if (!event.canceled) {\n          return;\n        }\n\n        const {dragOperation} = manager;\n        const {source} = dragOperation;\n\n        if (!isSortable(source)) {\n          return;\n        }\n\n        if (\n          source.sortable.initialIndex === source.sortable.index &&\n          source.sortable.initialGroup === source.sortable.group\n        ) {\n          return;\n        }\n\n        queueMicrotask(() => {\n          const instances = getSortableInstances();\n          const initialGroupInstances = instances.get(\n            source.sortable.initialGroup\n          );\n\n          if (!initialGroupInstances) return;\n\n          // Wait for the renderer to handle the event before attempting to optimistically update\n          manager.renderer.rendering.then(() => {\n            for (const [group, sortableInstances] of instances.entries()) {\n              const entries = Array.from(sortableInstances).entries();\n\n              for (const [index, sortable] of entries) {\n                if (sortable.index !== index || sortable.group !== group) {\n                  // At least one index or group was changed so we should abort optimistic updates\n                  return;\n                }\n              }\n            }\n\n            const initialGroup = sort(initialGroupInstances);\n            const sourceElement = source.sortable.element;\n            const targetElement =\n              initialGroup[source.sortable.initialIndex]?.element;\n\n            if (!targetElement || !sourceElement) {\n              return;\n            }\n\n            reorder(\n              sourceElement,\n              source.sortable.initialIndex,\n              targetElement,\n              source.sortable.initialIndex\n            );\n\n            batch(() => {\n              for (const [_, sortableInstances] of instances.entries()) {\n                const entries = Array.from(sortableInstances).values();\n\n                for (const sortable of entries) {\n                  sortable.index = sortable.initialIndex;\n                  sortable.group = sortable.initialGroup;\n                }\n              }\n            });\n          });\n        });\n      }),\n    ];\n\n    this.destroy = () => {\n      for (const unsubscribeListener of unsubscribe) {\n        unsubscribeListener();\n      }\n    };\n  }\n}\n\nfunction reorder(\n  sourceElement: Element,\n  sourceIndex: number,\n  targetElement: Element,\n  targetIndex: number\n) {\n  const position = targetIndex < sourceIndex ? 'afterend' : 'beforebegin';\n\n  targetElement.insertAdjacentElement(position, sourceElement);\n}\n\nfunction sortByIndex(a: Sortable, b: Sortable) {\n  return a.index - b.index;\n}\n\nfunction sort(instances: Set<Sortable>) {\n  return Array.from(instances).sort(sortByIndex);\n}\n","import {batch, reactive, untracked} from '@dnd-kit/state';\nimport type {CollisionPriority, Modifiers} from '@dnd-kit/abstract';\nimport type {\n  Data,\n  PluginConstructor,\n  Type,\n  UniqueIdentifier,\n} from '@dnd-kit/abstract';\nimport {\n  defaultCollisionDetection,\n  type CollisionDetector,\n} from '@dnd-kit/collision';\nimport {Draggable, Droppable} from '@dnd-kit/dom';\nimport type {\n  DraggableInput,\n  FeedbackType,\n  DroppableInput,\n  Sensors,\n  DragDropManager,\n} from '@dnd-kit/dom';\nimport {\n  animateTransform,\n  getComputedStyles,\n  computeTranslate,\n  ProxiedElements,\n} from '@dnd-kit/dom/utilities';\n\nimport {SortableKeyboardPlugin} from './SortableKeyboardPlugin.ts';\nimport {OptimisticSortingPlugin} from './OptimisticSortingPlugin.ts';\n\nexport interface SortableTransition {\n  /**\n   * The duration of the transition in milliseconds.\n   * @default 300\n   */\n  duration?: number;\n  /**\n   * The easing function to use for the transition.\n   * @default 'cubic-bezier(0.25, 1, 0.5, 1)'\n   */\n  easing?: string;\n  /**\n   * Whether the sortable item should transition when its index changes,\n   * but there is no drag operation in progress.\n   * @default false\n   **/\n  idle?: boolean;\n}\n\nconst defaultPlugins: PluginConstructor[] = [\n  SortableKeyboardPlugin,\n  OptimisticSortingPlugin,\n];\n\nexport interface SortableInput<T extends Data>\n  extends DraggableInput<T>,\n    DroppableInput<T> {\n  /**\n   * The index of the sortable item within its group.\n   */\n  index: number;\n\n  /**\n   * The element that should be used as the droppable target for this sortable item.\n   */\n  target?: Element;\n\n  /**\n   * The optional unique identifier of the group that the sortable item belongs to.\n   */\n  group?: UniqueIdentifier;\n  /**\n   * The transition configuration to use when the index of the sortable item changes.\n   */\n  transition?: SortableTransition | null;\n  /**\n   * Plugins to register when sortable item is instantiated.\n   * @default [SortableKeyboardPlugin, OptimisticSortingPlugin]\n   */\n  plugins?: PluginConstructor[];\n}\n\nexport const defaultSortableTransition: SortableTransition = {\n  duration: 250,\n  easing: 'cubic-bezier(0.25, 1, 0.5, 1)',\n  idle: false,\n};\n\nexport class Sortable<T extends Data = Data> {\n  public draggable: Draggable<T>;\n  public droppable: Droppable<T>;\n\n  @reactive\n  public accessor index: number;\n\n  previousIndex: number;\n  initialIndex: number;\n  initialGroup: UniqueIdentifier | undefined;\n\n  @reactive\n  public accessor group: UniqueIdentifier | undefined;\n\n  transition: SortableTransition | null;\n\n  constructor(\n    {\n      effects: inputEffects = () => [],\n      group,\n      index,\n      sensors,\n      type,\n      transition = defaultSortableTransition,\n      plugins = defaultPlugins,\n      ...input\n    }: SortableInput<T>,\n    manager: DragDropManager<any, any> | undefined\n  ) {\n    let previousGroup = group;\n\n    this.droppable = new SortableDroppable<T>(input, manager, this);\n    this.draggable = new SortableDraggable<T>(\n      {\n        ...input,\n        effects: () => [\n          () =>\n            this.manager?.monitor.addEventListener('dragstart', () => {\n              this.initialIndex = this.index;\n              this.initialGroup = this.group;\n              this.previousIndex = this.index;\n            }),\n          () => {\n            const {index, group, previousIndex, manager: _} = this;\n\n            // Re-run this effect whenever the index changes\n            if (index !== previousIndex || group !== previousGroup) {\n              this.previousIndex = index;\n              previousGroup = group;\n\n              this.animate();\n            }\n          },\n          () => {\n            const {target} = this;\n            const {feedback, isDragSource} = this.draggable;\n\n            if (feedback == 'move' && isDragSource) {\n              this.droppable.disabled = !target;\n            }\n          },\n          () => {\n            const {manager} = this;\n\n            for (const plugin of plugins) {\n              manager?.registry.register(plugin);\n            }\n          },\n          ...inputEffects(),\n        ],\n        type,\n        sensors,\n      },\n      manager,\n      this\n    );\n\n    this.#element = input.element;\n    this.manager = manager;\n    this.index = index;\n    this.previousIndex = index;\n    this.initialIndex = index;\n    this.group = group;\n    this.type = type;\n    this.transition = transition;\n  }\n\n  protected animate() {\n    untracked(() => {\n      const {manager, transition} = this;\n      const {shape} = this.droppable;\n\n      if (!manager) return;\n\n      const {idle} = manager.dragOperation.status;\n\n      if (!shape || !transition || (idle && !transition.idle)) {\n        return;\n      }\n\n      manager.renderer.rendering.then(() => {\n        const {element} = this;\n\n        if (!element) {\n          return;\n        }\n\n        const updatedShape = this.refreshShape();\n\n        if (!updatedShape) {\n          return;\n        }\n\n        queueMicrotask(() => {\n          const delta = {\n            x:\n              shape.boundingRectangle.left -\n              updatedShape.boundingRectangle.left,\n            y: shape.boundingRectangle.top - updatedShape.boundingRectangle.top,\n          };\n\n          const {translate} = getComputedStyles(element);\n          const currentTranslate = computeTranslate(element, translate, false);\n          const finalTranslate = computeTranslate(element, translate);\n\n          if (delta.x || delta.y) {\n            animateTransform({\n              element,\n              keyframes: {\n                translate: [\n                  `${currentTranslate.x + delta.x}px ${currentTranslate.y + delta.y}px ${currentTranslate.z}`,\n                  `${finalTranslate.x}px ${finalTranslate.y}px ${finalTranslate.z}`,\n                ],\n              },\n              options: transition,\n              onFinish: () => {\n                if (!manager.dragOperation.status.dragging) {\n                  this.droppable.shape = undefined;\n                }\n              },\n            });\n          }\n        });\n      });\n    });\n  }\n\n  public get manager(): DragDropManager<any, any> | undefined {\n    return this.draggable.manager as any;\n  }\n\n  public set manager(manager: DragDropManager<any, any> | undefined) {\n    batch(() => {\n      this.draggable.manager = manager as any;\n      this.droppable.manager = manager as any;\n    });\n  }\n\n  #element: Element | undefined;\n\n  public set element(element: Element | undefined) {\n    batch(() => {\n      const previousElement = this.#element;\n      const droppableElement = this.droppable.element;\n      const draggableElement = this.draggable.element;\n\n      if (!droppableElement || droppableElement === previousElement) {\n        this.droppable.element = element;\n      }\n\n      if (!draggableElement || draggableElement === previousElement) {\n        this.draggable.element = element;\n      }\n\n      this.#element = element;\n    });\n  }\n\n  public get element() {\n    const element = this.#element;\n\n    if (!element) return;\n\n    return ProxiedElements.get(element) ?? element ?? this.droppable.element;\n  }\n\n  public set target(target: Element | undefined) {\n    this.droppable.element = target;\n  }\n\n  public get target() {\n    return this.droppable.element;\n  }\n\n  public set source(source: Element | undefined) {\n    this.draggable.element = source;\n  }\n\n  public get source() {\n    return this.draggable.element;\n  }\n\n  public get disabled() {\n    return this.draggable.disabled && this.droppable.disabled;\n  }\n\n  public set feedback(value: FeedbackType) {\n    this.draggable.feedback = value;\n  }\n\n  public set disabled(value: boolean) {\n    batch(() => {\n      this.droppable.disabled = value;\n      this.draggable.disabled = value;\n    });\n  }\n\n  public set data(data: T) {\n    batch(() => {\n      this.droppable.data = data;\n      this.draggable.data = data;\n    });\n  }\n\n  public set handle(handle: Element | undefined) {\n    this.draggable.handle = handle;\n  }\n\n  public set id(id: UniqueIdentifier) {\n    batch(() => {\n      this.droppable.id = id;\n      this.draggable.id = id;\n    });\n  }\n\n  public get id() {\n    return this.droppable.id;\n  }\n\n  public set sensors(value: Sensors | undefined) {\n    this.draggable.sensors = value;\n  }\n\n  public set modifiers(value: Modifiers | undefined) {\n    this.draggable.modifiers = value;\n  }\n\n  public set collisionPriority(value: CollisionPriority | number | undefined) {\n    this.droppable.collisionPriority = value;\n  }\n\n  public set collisionDetector(value: CollisionDetector | undefined) {\n    this.droppable.collisionDetector = value ?? defaultCollisionDetection;\n  }\n\n  public set type(type: Type | undefined) {\n    batch(() => {\n      this.droppable.type = type;\n      this.draggable.type = type;\n    });\n  }\n\n  public get type() {\n    return this.draggable.type;\n  }\n\n  public set accept(value: Droppable['accept']) {\n    this.droppable.accept = value;\n  }\n\n  public get accept() {\n    return this.droppable.accept;\n  }\n\n  public get isDropTarget() {\n    return this.droppable.isDropTarget;\n  }\n\n  /**\n   * A boolean indicating whether the sortable item is the source of a drag operation.\n   */\n  public get isDragSource() {\n    return this.draggable.isDragSource;\n  }\n\n  public get status() {\n    return this.draggable.status;\n  }\n\n  public refreshShape() {\n    return this.droppable.refreshShape();\n  }\n\n  public accepts(draggable: Draggable): boolean {\n    return this.droppable.accepts(draggable);\n  }\n\n  public register = () => {\n    batch(() => {\n      this.manager?.registry.register(this.droppable);\n      this.manager?.registry.register(this.draggable);\n    });\n\n    return () => this.unregister();\n  };\n\n  public unregister = () => {\n    batch(() => {\n      this.manager?.registry.unregister(this.droppable);\n      this.manager?.registry.unregister(this.draggable);\n    });\n  };\n\n  public destroy = () => {\n    batch(() => {\n      this.droppable.destroy();\n      this.draggable.destroy();\n    });\n  };\n}\n\nexport class SortableDraggable<T extends Data> extends Draggable<T> {\n  constructor(\n    input: DraggableInput<T>,\n    manager: DragDropManager | undefined,\n    public sortable: Sortable<T>\n  ) {\n    super(input, manager);\n  }\n\n  get index() {\n    return this.sortable.index;\n  }\n}\n\nexport class SortableDroppable<T extends Data> extends Droppable<T> {\n  constructor(\n    input: DraggableInput<T>,\n    manager: DragDropManager | undefined,\n    public sortable: Sortable<T>\n  ) {\n    super(input, manager);\n  }\n}\n"]}