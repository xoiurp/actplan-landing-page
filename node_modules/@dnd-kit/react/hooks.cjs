'use strict';

var react = require('react');
var state = require('@dnd-kit/state');
var reactDom = require('react-dom');
var utilities = require('@dnd-kit/react/utilities');

function useConstant(initializer) {
  const ref = react.useRef(null);
  if (!ref.current) {
    ref.current = initializer();
  }
  return ref.current;
}
var canUseDOM = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
var useIsomorphicLayoutEffect = canUseDOM ? react.useLayoutEffect : react.useEffect;

// src/hooks/useSignal.ts
function useSignal(signal, sync = false) {
  let val = signal.peek();
  const read = react.useRef(false);
  const update = react.useState(val)[1];
  useIsomorphicLayoutEffect(
    () => state.effect(() => {
      if (val !== (val = signal.value)) {
        if (!read.current) return;
        if (sync) {
          reactDom.flushSync(() => update(val));
        } else {
          update(val);
        }
      }
    }),
    [signal, sync]
  );
  return {
    get value() {
      read.current = true;
      return signal.value;
    }
  };
}

// src/hooks/useComputed.ts
function useComputed(compute, dependencies = [], sync = false) {
  const $compute = react.useRef(compute);
  $compute.current = compute;
  return useSignal(
    react.useMemo(() => state.computed(() => $compute.current()), dependencies),
    sync
  );
}

// src/hooks/useImmediateEffect.ts
function useImmediateEffect(callback, _) {
  callback();
}
function useLatest(value) {
  const valueRef = react.useRef(value);
  useIsomorphicLayoutEffect(() => {
    valueRef.current = value;
  }, [value]);
  return valueRef;
}
function useOnValueChange(value, onChange, effect2 = react.useEffect, compare = Object.is) {
  const tracked = react.useRef(value);
  effect2(() => {
    const oldValue = tracked.current;
    if (!compare(value, oldValue)) {
      tracked.current = value;
      onChange(value, oldValue);
    }
  }, [onChange, value]);
}
function useOnElementChange(value, onChange) {
  const previous = react.useRef(utilities.currentValue(value));
  useIsomorphicLayoutEffect(() => {
    const current = utilities.currentValue(value);
    if (current !== previous.current) {
      previous.current = current;
      onChange(current);
    }
  });
}

exports.useComputed = useComputed;
exports.useConstant = useConstant;
exports.useImmediateEffect = useImmediateEffect;
exports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;
exports.useLatest = useLatest;
exports.useOnElementChange = useOnElementChange;
exports.useOnValueChange = useOnValueChange;
//# sourceMappingURL=hooks.cjs.map
//# sourceMappingURL=hooks.cjs.map