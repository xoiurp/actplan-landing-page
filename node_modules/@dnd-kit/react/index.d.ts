import * as react_jsx_runtime from 'react/jsx-runtime';
import { PropsWithChildren } from 'react';
import * as _dnd_kit_abstract from '@dnd-kit/abstract';
import { DragDropEvents, Data, DragDropManager as DragDropManager$1 } from '@dnd-kit/abstract';
import * as _dnd_kit_dom from '@dnd-kit/dom';
import { DragDropManagerInput, DragDropManager, Draggable, Droppable, DraggableInput, DroppableInput } from '@dnd-kit/dom';
import { RefOrValue } from '@dnd-kit/react/utilities';
import { CleanupFunction } from '@dnd-kit/state';

type Events = DragDropEvents<Draggable, Droppable, DragDropManager>;
interface Props extends DragDropManagerInput, PropsWithChildren {
    manager?: DragDropManager;
    onBeforeDragStart?: Events['beforedragstart'];
    onCollision?: Events['collision'];
    onDragStart?: Events['dragstart'];
    onDragMove?: Events['dragmove'];
    onDragOver?: Events['dragover'];
    onDragEnd?: Events['dragend'];
}
declare function DragDropProvider({ children, onCollision, onBeforeDragStart, onDragStart, onDragMove, onDragOver, onDragEnd, ...input }: Props): react_jsx_runtime.JSX.Element;

interface UseDraggableInput<T extends Data = Data> extends Omit<DraggableInput<T>, 'handle' | 'element'> {
    handle?: RefOrValue<Element>;
    element?: RefOrValue<Element>;
}
declare function useDraggable<T extends Data = Data>(input: UseDraggableInput<T>): {
    draggable: Draggable<T>;
    readonly isDragSource: boolean;
    readonly status: "idle" | "dragging" | "dropping";
    handleRef: (element: Element | null) => void;
    ref: (element: Element | null) => void;
};

interface UseDroppableInput<T extends Data = Data> extends Omit<DroppableInput<T>, 'element'> {
    element?: RefOrValue<Element>;
}
declare function useDroppable<T extends Data = Data>(input: UseDroppableInput<T>): {
    readonly isDropTarget: boolean;
    ref: (element: Element | null) => void;
    droppable: Droppable<T>;
};

declare function useDragDropManager(): _dnd_kit_dom.DragDropManager<_dnd_kit_dom.Draggable<_dnd_kit_abstract.Data>, _dnd_kit_dom.Droppable<_dnd_kit_abstract.Data>> | null;

declare function useDragOperation(): {
    readonly source: _dnd_kit_dom.Draggable<_dnd_kit_abstract.Data> | null | undefined;
    readonly target: _dnd_kit_dom.Droppable<_dnd_kit_abstract.Data> | null | undefined;
};

interface Instance<T extends DragDropManager$1<any, any> = DragDropManager$1<any, any>> {
    manager: T | undefined;
    register(): CleanupFunction | void;
}
declare function useInstance<T extends Instance>(initializer: (manager: DragDropManager$1<any, any> | undefined) => T): T;

export { DragDropProvider, type UseDraggableInput, type UseDroppableInput, useDragDropManager, useDragOperation, useDraggable, useDroppable, useInstance };
